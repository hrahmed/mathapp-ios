/*
 *
 * Copyright (c) 2013-2016 CA Technologies
 * All rights reserved.
 *
 */

#ifndef CAMDOReporter_h
#define CAMDOReporter_h

#import <Foundation/Foundation.h>
#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>

extern CGFloat CAMAA_SCREENSHOT_QUALITY_HIGH;
extern CGFloat CAMAA_SCREENSHOT_QUALITY_MEDIUM;
extern CGFloat CAMAA_SCREENSHOT_QUALITY_LOW;
extern CGFloat CAMAA_SCREENSHOT_QUALITY_DEFAULT;    //Uses HIGH on iPhones and MEDIUM in iPads

extern NSString *const CAMAA_CRASH_OCCURRED;

typedef NS_OPTIONS(NSInteger, SDKOptions) {
    SDKDefault                      = 0,
    SDKLogLevelSilent               = (1 << 0),
    SDKLogLevelVerbose              = (1 << 1),
    SDKCheckProfileOnRestartOnly    = (1 << 2),
    SDKURLDelegateSwizzling         = (1 << 3), //not supported yet
    SDKNoWorkLightSwizzling         = (1 << 4),
    SDKNoGeoLocationCapturing       = (1 << 5),
    SDKNoNetworkSwizzling           = (1 << 6),
    SDKCollectDeviceName            = (1 << 7), // It is App developer's responsibility to provide a disclaimenr to the consumer that they are collecting this data.  By default CA SDK will NOT collect the device name
    SDKUIWebViewDelegate            = (1 << 8) //requires SDK build with private APIs
};

typedef NS_ENUM(NSInteger, SDKError) {
    ErrorNone,
    ErrorNoTransactionName,
    ErrorTransactionInProgress,
    ErrorFailedToTakeScreenshot,
    ErrorInvalidValuesPassed
};

//Enums to be specified for the pinningMode during the SSL handshake
typedef NS_ENUM(NSUInteger, CAMDOSSLPinningMode) {
    CAMDOSSLPinningModeNone,
    CAMDOSSLPinningModePublicKey,
    CAMDOSSLPinningModeCertificate,
};

@interface CAMDOReporter : NSObject {

}

/*
 * Initializes the SDk with default options.  This call should be made as early as possible in the
 * application life cycle. Typically, it is made at the beginning of didFinishLaunchingWithOptions in
 * Application delegate class
 * @param completionBlock which is a standard (BOOL completed, NSError *error)block. 
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */
+ (void) initializeSDKWithCompletionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock;

/*
 * Initializes the SDk with default options.  This call should be made as early as possible in the
 * application life cycle. Typically, it is made at the beginning of didFinishLaunchingWithOptions in
 * Application delegate class
 * @param options of the type SDKOptions.
 * @param completionBlock which is a standard (BOOL completed, NSError *error)block.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */

+ (void) initializeSDKWithOptions:(SDKOptions) options completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock;

/* Use this API to enable SDK.  SDK is enabled by default.  You need to call this API only if you called disableSDK earlier
 */
+ (void) enableSDK;

/* Use this API to disable the SDK.  When disabled, SDK is completely out of the process
 */
+ (void) disableSDK;

/* Returns if the SDK is currently enabled or not
 */
+ (BOOL) isSDKEnabled;

/* Use this API to get the unique device ID generated by the SDK
 */
+ (NSString *) deviceId;

/* Get the customer ID.  If it not set, this API returns nil
 */
+ (NSString *) customerId;

/* Use this API to set the customer ID.  If nil is passed, customer id us reset
 */
+ (SDKError) setCustomerId:(NSString *) customerId;

/* Stops collecting potentially sensitive data.
 * The following data is not collected when the app enters private zone
 *    - Screenshots
 *    - Location information including GPS and IP addresses
 *    - Value in the text entry fields
 */
+ (void) enterPrivateZone;

/* Starts collecting all data again
 */
+ (void) exitPrivateZone;

/* Returns if CA MAA SDK is in private zone or not
 */
+ (BOOL) isInPrivateZone;

/* Returns the SDK computed APM header in key value format.  Returns nil if apm header cannot be computed
 */
+ (NSDictionary *) apmHeader;

/* Adds data to SDK computed APM header with a semicolon (;) separation
 */
+ (void) addToApmHeader:(NSString *)data;

/* Use this method to set the ssl pinning mode.
 * CAMDOSSLPinningModeNone, CAMDOSSLPinningModePublicKey & CAMDOSSLPinningModeCertificate.
 * By default SSL pinning mode is set to CAMDOSSLPinningModeNone.
 * If the pinningmode is set to either CAMDOSSLPinningModePublicKey or CAMDOSSLPinningModeCertificate the
 * pinned certificate should be placed in the resource bundle. To pass the certificate as data use the api
 * + (void) setSSLPinningMode:(CAMDOSSLPinningMode)pinningMode certificates:(NSArray*)certificates;
 * SDK always expects a certificate if the pinning mode is set to CAMDOSSLPinningModePublicKey or
 * CAMDOSSLPinningModeCertificate. If the certificate is not present in the bundle then the initialization of
 * the SDK fails. By setting the mode CAMDOSSLPinningModeNone will not check the server authentication during
 * establishment of SSL connection.
 */
+ (void) setSSLPinningMode:(CAMDOSSLPinningMode) pinningMode;

/* Use this method to set the ssl pinning mode and aray of certificates.
 * SSL PinningModes are CAMDOSSLPinningModeNone, CAMDOSSLPinningModePublicKey &
 * CAMDOSSLPinningModeCertificate.
 * By default SSL pinning mode is set to CAMDOSSLPinningModeNone.
 * This method expects array of certificates which are NSData object.
 * SDK always expects a certificate if the pinning mode is set to CAMDOSSLPinningModePublicKey or
 * CAMDOSSLPinningModeCertificate. If the certificate is not passed then the initialization of
 * the SDK fails. By setting the mode CAMDOSSLPinningModeNone will not check the server authentication during
 * establishment of SSL connection.
 */
+ (void) setSSLPinningMode:(CAMDOSSLPinningMode) pinningMode withCertificates:(NSArray*) certificates;

/* Use this method to stop the current session.  No data will be logged until startSession API is called again
 */
+ (void) stopCurrentSession;

/* Use this methid to start a new session.  If a session is already in progress, it will be ended and new session is started
 */
+ (void) startNewSession;

/* Convenient method to stop the current session in progress and start a new session
 */
+ (void) stopCurrentAndStartNewSession;

/*
 * This method can be used to start a transaction with name. completion block can be used to verify whether transaction is started successfully or not.
 * @param transactionName which is NSString.
 * @param completionBlock which is a standard (BOOL completed, NSError *error) completionBlock.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */
+ (void) startApplicationTransactionWithName:(NSString *) transactionName completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock;

/*
 * This method can be used to start a transaction with name. serviceName completion block can be used to verify whether transaction is started successfully or not.
 * @param transactionName which is NSString.
 * @param serviceName which is NSString.
 * @param completionBlock which is a standard (BOOL completed, NSError *error) completionBlock.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */

+ (void) startApplicationTransactionWithName:(NSString *) transactionName service:(NSString *)serviceName completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock;


/*
 * This method can be used to stop a transaction with name and completion block can be used to verify whether transaction is started successfully or not.
 * @param transactionName which is NSString.
 * @param completionBlock which is a standard (BOOL completed, NSError *error) completionBlock.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */
+ (void) stopApplicationTransactionWithName:(NSString *) transactionName completionHandler:(void(^)(BOOL completed,NSError *error))completionBlock;

/*
 * This method can be used to stop a transaction with name. serviceName completion block can be used to verify whether transaction is started successfully or not.
 * @param transactionName which is NSString.
 * @param serviceName which is NSString.
 * @param completionBlock which is a standard (BOOL completed, NSError *error) completionBlock.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */
+ (void) stopApplicationTransactionWithName:(NSString *) transactionName failure:(NSString *) failure completionHandler:(void(^)(BOOL completed,NSError *error)) completionBlock;


+ (void) setCustomerFeedback:(NSString *) feedback;
/*
 * Set Location of the Customer/User by passing zip code and country.
 */

+ (void) setCustomerLocation:(NSString *) zip andCountry:(NSString *) country;


/*
 * Set Location of the Customer/User by passing CLLocation (latitude & longitude).
 */
+ (void) setCustomerLocation:(CLLocation *) location;


/*
 * Set the location of the customer using geo coordinates
 */

/*
 * This methods can be used to send the screen shot of the current screen. 
 * @param name for the screen name, cannot be nil.
 * @param quality of the image. The value should be between 0.0 to 1.0. By default it is set to low quality. 
 * @param completionBlock which is a standard (BOOL completed, NSError *error) completionBlock.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */
+ (void) sendScreenShot:(NSString *) name withQuality:(CGFloat) quality completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock;

/*
 * @param name
 * @param loadTime
 * @param completionBlock which is a standard (BOOL completed, NSError *error) completionBlock.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */
+(void) viewLoaded:(NSString *) name loadTime:(CGFloat) loadTime completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock;

/* List of names of the views to be ignored.  Screenshots and transitions of the views that are in ignore list 
 * are not captured
 */
+(void) ignoreView:(NSString *) viewName;

/* Name of the view to be ignored.  Screenshots and transitions of the views that are in ignore list are not captured
 */
+(void) ignoreViews:(NSSet *) viewNames;

/* Use this to set your own delegate to handle SSL authentication challenges.
 * Typically the id would implement NSURLSessionDelegate
 */

+ (void) setNSURLSessionDelegate:(id) delegate;

/* Returns YES if screenshots are enabled by policy.  Otherwise returns NO
 */
+ (BOOL) isScreenshotPolicyEnabled;

/* Use this to set your own NSURLSession delegate
 * Returns the default session configuration to use when constructing NSURLSession with your own delegate
 */
+ (NSURLSessionConfiguration *) getDefaultNSURLSessionConfiguration;

/*
 * This method can be used to add custom network event in the current session.
 * @param url, string reprentation of the network URL.
 * @param status, any NSInteger value.
 * @param responseTime, any integer value.
 * @param inBytes, any integer value.
 * @param outBytes, any integer value.
 * @param completionBlock which is a standard (BOOL completed, NSError *error) completionBlock.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */
+ (void) logNetworkEvent:(NSString *) url withStatus:(NSInteger) status withResponseTime:(int64_t) responseTime withInBytes:(int64_t) inBytes withOutBytes:(int64_t) outBytes completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock;

/*
 * This method can be used to add custom text event of type NSString in the current session.
 * @param name, which is an event name.
 * @param value, which is an event value.
 * @param attributes which is of the type NSMutableDictionary which can be used to send any extra parameters.
 * @param completionBlock which is a standard (BOOL completed, NSError *error) completionBlock.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */
+ (void) logTextMetric:(NSString *) name withValue:(NSString *) value withAttributes:(NSMutableDictionary *) attributes completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock;

/*
 * This method can be used to add custom numeric event of type double in the current session.
 * @param name, which is an event name.
 * @param value, which is an event value.
 * @param attributes which is of the type NSMutableDictionary which can be used to send any extra parameters.
 * @param completionBlock which is a standard (BOOL completed, NSError *error) completionBlock.
 * Successful exceution of the method will have completed as YES and error object is nil. In case of failure the completed is set to NO and error will have NSError
 * object with domain, code and localizedDescription.
 */
+ (void) logNumericMetric:(NSString *) name withValue:(double) value withAttributes:(NSMutableDictionary *) attributes completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock;

/*
 * Force upload event(s). This is bulk/resource consuming operation and should be used with caution.
 * This method takes a completion block as the parameter. 
 * @param completionBlock with response as NSDictionary and error object.
 * Response dictionary conatins the Key 'CAMDOResponseKey' which holds the URLResponse details and the key 'CAMDOTotalUploadedEvents' which holds the total number of events
 * uploaded.
 */
+ (void) uploadEventsWithCompletionHandler:(void (^)(NSDictionary *response, NSError *error)) completionBlock;

#pragma mark deprecated

+ (CAMDOReporter *) sharedInstance __attribute__((deprecated("Use  class level +[CAMDOReporter <method>] instead")));

extern NSString *const CAMAA_CUSTOM_METRIC_TYPE_STRING __attribute__((deprecated("Use + (SDKError) logTextMetric:(NSString *)name withValue:(NSString *)value withAttributes:(NSMutableDictionary *)attributes instead")));
extern NSString *const CAMAA_CUSTOM_METRIC_TYPE_DOUBLE __attribute__((deprecated("Use + (SDKError) logNumericMetric:(NSString *)name withValue:(double)value withAttributes:(NSMutableDictionary *)attributes instead")));

extern NSString *const CAMAA_CUSTOMER_ID __attribute__((deprecated("Use - (void) setCustomerId:(NSString *)customerId; instead")));
extern NSString *const CAMAA_HEADER_ZIPCODE __attribute__((deprecated("Use - (void) setCustomerLocation:(NSString *)zip andCountry:(NSString *)country; instead")));
extern NSString *const CAMAA_HEADER_COUNTRY __attribute__((deprecated("Use - (void) setCustomerLocation:(NSString *)zip andCountry:(NSString *)country; instead")));

- (void) stopCurrentAndStartNewSession __attribute__((deprecated("Use  + (void) stopCurrentAndStartNewSession instead")));

- (void) setCustomerFeedback:(NSString *) feedback __attribute__((deprecated("Use  + (void) setCustomerFeedback:(NSString *) feedback instead")));

- (void) setCustomerLocation:(NSDictionary *) locationInfo __attribute__((deprecated("Use - (void) setCustomerLocation:(NSString *)zip andCountry:(NSString *)country; instead")));

- (void) addSessionEventOf:(NSString *)type withName:(NSString *) name withValue:(NSString *) value __attribute__((deprecated("Use - logTextMetric or logNumericMetric instead")));

- (void) addSessionEventOf:(NSString *)type withName:(NSString *) name withValue:(NSString *)value withAttributes:(NSMutableDictionary *)attributes __attribute__((deprecated("Use - logTextMetric or logNumericMetric instead")));

- (void) setSessionInfoOf:(NSString *)type withName:(NSString *) name withValue:(NSString *)value __attribute__((deprecated("Use (SDKError) setCustomerId:(NSString *) customerId instead")));


+ (void) initializeSDK __attribute__((deprecated("Use  + (void) initializeSDKWithCompletionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock instead")));

+ (void) initializeSDKWithOptions:(SDKOptions) options __attribute__((deprecated("Use  + (void) initializeSDKWithOptions:(SDKOptions) options completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock instead")));

- (BOOL) startApplicationTransaction:(NSString *) transactionName __attribute__((deprecated("Use  + (void) startApplicationTransactionWithName:(NSString *) transactionName completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock instead")));

- (BOOL) startApplicationTransaction:(NSString *) transactionName withServiceName:(NSString *) serviceName __attribute__((deprecated("Use  + (void) startApplicationTransactionWithName:(NSString *) transactionName service:(NSString *)serviceName completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock instead")));

- (BOOL) stopApplicationTransaction:(NSString *) transactionName __attribute__((deprecated("Use  + (void) stopApplicationTransactionWithName:(NSString *) transactionName completionHandler:(void(^)(BOOL completed,NSError *error))completionBlock instead")));

- (BOOL) stopApplicationTransaction:(NSString *) transactionName withFailure:(NSString *) failure __attribute__((deprecated("Use  + (void) stopApplicationTransactionWithName:(NSString *) transactionName failure:(NSString *) failure completionHandler:(void(^)(BOOL completed,NSError *error)) completionBlock instead")));

- (SDKError) sendScreenShot:(NSString *) name withQuality:(CGFloat) quality __attribute__((deprecated("Use  + (void) sendScreenShot:(NSString *) name withQuality:(CGFloat) quality completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock instead")));

- (void) logNetworkEvent:(NSString *) url withStatus:(NSInteger) status withResponseTime:(int64_t) responseTime withInBytes:(int64_t) inBytes withOutBytes:(int64_t) outBytes __attribute__((deprecated("Use  + (void) logNetworkEvent:(NSString *) url withStatus:(NSInteger) status withResponseTime:(int64_t) responseTime withInBytes:(int64_t) inBytes withOutBytes:(int64_t) outBytes completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock instead")));

- (SDKError) viewLoaded:(NSString *) name loadTime:(CGFloat) loadTime __attribute__((deprecated("Use  +(void) viewLoaded:(NSString *) name loadTime:(CGFloat) loadTime completionHandler:(void(^)(BOOL completed, NSError *error)) completionBlock instead")));

+ (void) uploadEvents __attribute__((deprecated("Use  + (void) uploadEventsWithCompletionHandler:(void (^)(NSDictionary *response, NSError *error)) completionBlock instead")));


@end

#endif /* CAMDOReporter_h */
